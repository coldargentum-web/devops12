Exercise 1: Hello World
#!/bin/bash
echo "Hello, World!"

Exercise 2: User Input
#!/bin/bash
echo "What is your name?"
read name
echo "Hello, $name!"

Exercise 3: Conditional Statements
#!/bin/bash
echo "Enter filename:"
read filename

if [ -f "$filename" ]; then
    echo "File exists"
else
    echo "File doesn't exist"
fi

Exercise 4: Looping
#!/bin/bash
for i in {1..10}; do
    echo $i
done

Exercise 5: File Operations
#!/bin/bash
if [ $# -ne 2 ]; then
    echo "Usage: $0 <source> <destination>"
    exit 1
fi

source=$1
destination=$2

if [ -f "$source" ]; then
    cp "$source" "$destination"
    echo "File copied successfully"
else
    echo "Source file does not exist"
fi

Exercise 6: String Manipulation
#!/bin/bash
echo "Enter a sentence:"
read sentence

# Reverse words
reversed=$(echo "$sentence" | awk '{for(i=NF;i>0;i--) printf "%s ", $i; print ""}' | sed 's/ $//')
echo "Reversed: $reversed"

Exercise 7: Command Line Arguments
#!/bin/bash
if [ $# -ne 1 ]; then
    echo "Usage: $0 <filename>"
    exit 1
fi

filename=$1

if [ -f "$filename" ]; then
    lines=$(wc -l < "$filename")
    echo "Number of lines: $lines"
else
    echo "File does not exist"
fi

Exercise 8: Arrays
#!/bin/bash
fruits=("Apple" "Banana" "Orange" "Grape" "Mango")

echo "List of fruits:"
for fruit in "${fruits[@]}"; do
    echo "$fruit"
done

Exercise 9: Error Handling
#!/bin/bash
echo "Enter filename:"
read filename

if [ -f "$filename" ] && [ -r "$filename" ]; then
    echo "File contents:"
    cat "$filename"
else
    echo "Error: File does not exist or cannot be read" >&2
    exit 1
fi


rite script which watching directory "~/watch". If it sees that there appeared a new file, it prints files content and rename it to *.back

Write SystemD service for this script and make it running

#!/bin/bash

WATCH_DIR="$HOME/watch"
LOG_FILE="/var/log/directory_watcher.log"

# Create watch directory if it doesn't exist
mkdir -p "$WATCH_DIR"

log_message() {
    echo "$(date): $1" >> "$LOG_FILE"
}

process_file() {
    local file="$1"
    
    # Skip if it's a backup file or directory
    if [[ "$file" == *.back ]] || [ -d "$file" ]; then
        return
    fi
    
    local full_path="$WATCH_DIR/$file"
    local backup_path="$full_path.back"
    
    log_message "Processing new file: $file"
    
    # Print file content
    if [ -f "$full_path" ] && [ -r "$full_path" ]; then
        echo "=== Content of $file ==="
        cat "$full_path"
        echo "=== End of content ==="
        
        # Rename to .back
        if mv "$full_path" "$backup_path"; then
            log_message "Renamed $file to $file.back"
        else
            log_message "ERROR: Failed to rename $file"
        fi
    else
        log_message "ERROR: Cannot read file $file"
    fi
}

# Main watch loop
log_message "Starting directory watcher on $WATCH_DIR"

while true; do
    # Check for new files (non-backup files)
    for file in "$WATCH_DIR"/*; do
        if [ -f "$file" ] && [[ "$file" != *.back ]]; then
            filename=$(basename "$file")
            process_file "$filename"
        fi
    done
    
    sleep 5
done


[Unit]
Description=Directory Watcher Service
After=network.target

[Service]
Type=simple
User=%USER%
ExecStart=/home/%USER%/bin/directory_watcher.sh
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target

