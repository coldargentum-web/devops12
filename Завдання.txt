1.Ядро (Kernel) є центральним та найважливішим компонентом операційної системи Linux, виконуючи роль посередника між апаратним забезпеченням комп'ютера та запущеними на ньому програмами. Воно відповідає за ефективне управління всіма системними ресурсами.
 Основні функції ядра Linux
· Керування процесами: Ядро відповідає за створення, планування та завершення процесів. Воно визначає, який процес і скільки часу буде виконуватися на центральному процесорі (CPU), забезпечуючи багатозадачність.
· Керування пам'яттю: Ядро здійснює розподіл оперативної пам'яті між програмами та системою. Воно контролює, які частини пам'яті доступні кожному процесу, і використовує механізм віртуальної пам'яті, коли фізичної пам'яті недостатньо.
· Апаратна абстракція та керування пристроями: Однією з головних ідей ОС є надання програмістам зручних абстракцій замість "потворного" апаратного інтерфейсу. Ядро приховує складність роботи з апаратурою через драйвери пристроїв. Наприклад, замість того, щоб безпосередньо керувати контролером диска, програма працює з абстракцією файлу.
· Безпека та доступ: Ядро забезпечує захист системи, перешкоджаючи несанкціонованому доступу програм до ресурсів, на які вони не мають прав. Воно реалізує модель безпеки, що розмежовує права користувача та процесів.
· Управління мережею: Ядро обробляє мережеві пакети, забезпечуючи мережеву комунікацію.
· Системні виклики: Ядро надає програмам стандартизований інтерфейс (системні виклики) для запиту послуг операційної системи, таких як відкриття файлу або виділення пам'яті.

Ядро Linux є фундаментом усієї операційної системи. Його роль полягає в тому, щоб ефективно та безпечно керувати апаратними ресурсами комп'ютера, надаючи програмному забезпеченню стабільне та зручне середовище для виконання. Завдяки своїй відкритості, стабільності та здатності працювати на різноманітних пристроях — від наручних годинників до суперкомп'ютерів — Linux завдячує своїм успіхом саме цьому потужному та гнучкому ядру.

2.Бібліотеки в архітектурі операційної системи Linux відіграють ключову роль, виступаючи посередником між програмами користувача та ядром системи, і забезпечують стандартизований спосіб виконання завдань системного рівня.

Системні бібліотеки — це колекції попередньо написаного коду, які надають важливу функціональність для взаємодії програм з операційною системою. Вони дозволяють програмам виконувати завдання, такі як робота з файлами або управління пам'яттю, без необхідності безпосереднього звернення до захищеного простору ядра, що є фундаментальним принципом безпеки та стабільності Linux.

Архітектура Linux чітко поділяє середовище виконання на два простори:

· Простір ядра: Тут працює ядро системи, яке має повний доступ до апаратних ресурсів.
· Простір користувача: У цьому ізольованому середовищі виконуються всі користувацькі програми та застосунки.

Системні бібліотеки, як-от основна бібліотека C (glibc), знаходяться саме в просторі користувача. Коли програмі потрібна послуга ядра (наприклад, відкриття файлу), вона звертається до функції в системній бібліотеці. Ця бібліотека, у свою чергу, використовує безпечний механізм для "перемикання" в простір ядра та виконання запитуної операції. Така структура запобігає прямому доступу застосунків до апаратного забезпечення та захищає систему від збоїв і помилок окремих програм.

До найважливіших системних бібліотек в Linux належать:

· Бібліотека C (glibc): Найпоширеніша системна бібліотека, що надає фундаментальні функції, такі як розподіл пам'яті, операції введення-виведення та маніпулювання рядками.
· Математична бібліотека (libm): Забезпечує програми математичними функціями (тригонометричні, логарифмічні тощо).
· Бібліотека потоків (libpthread): Надає функції для створення та управління потоками (багатопотоковість) в програмах.

3.System utilities є важливим компонентом архітектури операційної системи Linux, який забезпечує зв'язок між користувачем та ядром системи.
В архітектурі Linux можна виділити три основні шари:

· Ядро (Kernel): відповідає за базові функції, такі як керування процесами, пам'яттю та обладнанням.
· Системні бібліотеки (System Libraries): надають функції для взаємодії应用程序 з ядром.
· System Utilities (Системні утиліти): це набір програм, які дозволяють користувачеві керувати системою та виконувати конкретні завдання з адміністрування.

Ці утиліти працюють у користувацькому просторі (User Space), виконуючись у непривілейованому режимі користувача (User Mode). Коли їм потрібен доступ до привілейованих ресурсів (наприклад, для керування обладнанням), вони ініціюють системний виклик (System Call), який передає керування ядру, що працює в режимі ядра (Kernel Mode).

System Utilities виконують кілька ключових ролей:

· Інтерфейс для керування системою: Вони є основним інструментом адміністратора для налаштування системи, моніторингу ресурсів та усунення несправностей.
· Автоматизація завдань: Системні утиліти можна об'єднувати в скрипти для автоматизації рутинних операцій (наприклад, резервного копіювання, обробки файлів).
· Доступ до інформації про систему: Багато утиліт надають детальну інформацію про апаратне забезпечення та стан системи, що важливо для діагностики.

Ось деякі поширені категорії та приклади системних утиліт:

Категорія утиліт Приклади та їх призначення
Робота з файлами ls (перегляд вмісту каталогу), cp (копіювання), mv (переміщення/перейменування), rm (видалення), find (пошук файлів).
Керування процесами ps (перегляд списку процесів), kill, pkill (завершення процесів), top, htop (моніторинг ресурсів у реальному часі).
Інформація про систему lspci (інформація про PCI-пристрої), lsusb (інформація про USB-пристрої), lsmod (перегляд завантажених модулів ядра), df (інформація про вільне місце на диску).
Обробка тексту grep (пошук текстових шаблонів), sort (сортування рядків), wc (підрахунок слів, рядків, байтів).

